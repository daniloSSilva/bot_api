package br.com.bots.service;

import br.com.bots.dto.MessageDTO;
import br.com.bots.model.Message;
import br.com.bots.repository.MessageRepository;
import org.modelmapper.MappingException;
import org.modelmapper.ModelMapper;
import org.modelmapper.spi.ErrorMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class MessageService {

    @Autowired
    private ModelMapper modelMapper;
    private MessageRepository messageRepository;

    private static final Logger LOGGER = LoggerFactory.getLogger(MessageService.class);

    public MessageService(MessageRepository messageRepository) {
        this.messageRepository = messageRepository;
    }

    public ResponseEntity findAll() {
        List<Message> messages = messageRepository.findAll();
        if (messages.isEmpty()) {
            LOGGER.error("No messages founded.");
            return ResponseEntity.badRequest().body("No messages founded.");
        }
        return ResponseEntity.ok(messages);
    }

    public ResponseEntity save(MessageDTO messageDTO) {
        if (messageDTO.getId() != null) {
            return ResponseEntity.badRequest().body("You cannot set an id, id is autogenerated.");
        }

        messageDTO.setId(UUID.randomUUID().toString());
        Message message = convertToEntity(messageDTO);

        try {
            messageRepository.save(message);
            return ResponseEntity.ok("Message has been inserted successfully.");
        } catch (Exception e) {
            LOGGER.error("Fail to insert message, error: ".concat(e.getMessage()));
            return ResponseEntity.badRequest().body("Error to insert message.");
        }
    }

    public ResponseEntity findById(String id) {
        Optional<Message> message = messageRepository.findById(id);
        if (!message.isPresent()) {
            LOGGER.error("Cannot find any message with id: ".concat(id));
            return ResponseEntity.badRequest().body("Cannot find any message with id: ".concat(id));
        }
        LOGGER.info("Message id: ".concat(id).concat(" localizado."));
        return ResponseEntity.ok(message);
    }

    public ResponseEntity findByConversationId(String conversationId) {
        List<Message> messages = messageRepository.findByConversationId(conversationId);
        if (messages.isEmpty()) {
            LOGGER.error("No messages with the conversation id: ".concat(conversationId));
            return ResponseEntity.badRequest().body("No messages with the conversation id: ".concat(conversationId));
        }
        LOGGER.info("Message conversation id: ".concat(conversationId).concat(" conversation localizado."));
        return ResponseEntity.ok(messages);
    }

    public MessageDTO convertToDTO(Message message) throws MappingException {
        try {
            MessageDTO clienteDTO = modelMapper.map(message, MessageDTO.class);
            return clienteDTO;
        } catch (MappingException e) {
            LOGGER.error("Erro de-para objetos.", e.getMessage());
            throw new MappingException((List<ErrorMessage>) e.getErrorMessages());
        }
    }

    public Message convertToEntity(MessageDTO messageDTO) {
        try {
            Message message = modelMapper.map(messageDTO, Message.class);
            return message;
        } catch (MappingException e) {
            LOGGER.error("Erro de-para objetos.", e.getMessage());
            throw new MappingException((List<ErrorMessage>) e.getErrorMessages());
        }
    }

}
